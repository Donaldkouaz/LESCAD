imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: fr

framework:
    esi: ~
    translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    form_themes:
        - 'bootstrap_3_layout.html.twig'

# Doctrine Configuration
doctrine:
    
    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        entity_managers:
            default:
                naming_strategy: doctrine.orm.naming_strategy.underscore
                auto_mapping: true
                mappings:
                    ApplicationSonataUserBundle: ~
                    SonataUserBundle: ~
                    FOSUserBundle: ~
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
    
        


stof_doctrine_extensions:
    orm:
        default:
            sluggable: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }


# FSOUser Configuration

fos_user:
    db_driver:     orm                       # Le type de BDD à utiliser, nous utilisons l'ORM Doctrine depuis le début
    firewall_name: main                      # Le nom du firewall derrière lequel on utilisera ces utilisateurs
    user_class:    Application\Sonata\UserBundle\Entity\User # La classe de l'entité User que nous utilisons
    use_listener:           true
    use_flash_notifications: true
    use_authentication_listener: true
    use_username_form_type: true
    model_manager_name:     null  # change it to the name of your entity/document manager if you don't want to use the default one.
    from_email:
        address: "%mailer_user%"
        sender_name: "LESCAD"
    profile:
        form:
            type:               fos_user_profile
#            handler:            fos_user.profile.form.handler.default
            name:               fos_user_profile_form
            validation_groups:  [Authentication] # Please note : this is not the default value
            
    change_password:
        form:
            type:               FOS\UserBundle\Form\Type\ChangePasswordFormType # or 'fos_user_change_password' on Symfony < 2.8
            name:               fos_user_change_password_form
            validation_groups:  [ChangePassword, Default]
    registration:
        confirmation:
            from_email: # Use this node only if you don't want the global email address for the confirmation email
                address:        "%mailer_user%"
                sender_name:    "LESCAD"
            enabled:    false # change to true for required email confirmation
            template:   '@FOSUser/Registration/email.txt.twig'
        form:
            type:               FOS\UserBundle\Form\Type\RegistrationFormType # or 'fos_user_registration' on Symfony < 2.8
            name:               fos_user_registration_form
            validation_groups:  [Registration, Default]
    resetting:
        retry_ttl: 7200 # Value in seconds, logic will use as hours
        token_ttl: 86400
        email:
            from_email: # Use this node only if you don't want the global email address for the resetting email
                address:        "%mailer_user%"
                sender_name:    "LESCAD"
            template:   '@FOSUser/Resetting/email.txt.twig'
        form:
            type:               FOS\UserBundle\Form\Type\ResettingFormType # or 'fos_user_resetting' on Symfony < 2.8
            name:               fos_user_resetting_form
            validation_groups:  [ResetPassword, Default]
    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager     
        
    service:
        mailer:                 fos_user.mailer.default
        email_canonicalizer:    fos_user.util.canonicalizer.default
        username_canonicalizer: fos_user.util.canonicalizer.default
        token_generator:        fos_user.util.token_generator.default
        user_manager: sonata.user.orm.user_manager
services:
 twig.extension.text:
     class: Twig_Extensions_Extension_Text
     tags:
         - { name: twig.extension }
         
sonata_block:
    default_contexts: [cms]
    blocks:
        # enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts: [admin]
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text: # used to if you plan to use Sonata user routes
        sonata.admin.block.search_result:
            contexts: [admin]
            
sonata_user:
    security_acl:           false

    manager_type: orm # Can be orm or mongodb

    table:
        user_group: "my_custom_user_group_association_table_name"

#    impersonating:
#        route:                page_slug
#        parameters:           { path: / }

    class:                  # Entity Classes
        user:               Application\Sonata\UserBundle\Entity\User
        group:              Application\Sonata\UserBundle\Entity\Group

    admin:                  # Admin Classes
        user:
            class:          Sonata\UserBundle\Admin\Entity\UserAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle

        group:
            class:          Sonata\UserBundle\Admin\Entity\GroupAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle

    profile:
        default_avatar: 'bundles/sonatauser/default_avatar.png' # Default avatar displayed if user doesn't have one
        # As in SonataAdminBundle's dashboard
#        dashboard:
#            groups:
#
#                # Prototype
#                id:
#                    label:                ~
#                    label_catalogue:      ~
#                    items:                []
#                    item_adds:            []
#                    roles:                []
#            blocks:
#                type:                 ~
#                settings:
#
#                    # Prototype
#                    id:                   []
#                position:             right
#        register:
#            # You may customize the registration forms over here
#            form:
#                type:                 sonata_user_registration
#                handler:              sonata.user.registration.form.handler.default
#                name:                 sonata_user_registration_form
#                validation_groups:
#
#                    # Defaults:
#                    - Registration
#                    - Default
#            # This allows you to specify where you want your user redirected once he activated his account
#            confirm:
#                redirect:
#                    # Set it to false to disable redirection
#                    route: 'sonata_user_profile_show'
#                    route_parameters: ~
#
#        # Customize user portal menu by setting links
#        menu:
#            -
#                route: 'sonata_user_profile_edit'
#                label: 'link_edit_profile'
#                domain: 'SonataUserBundle'
#            -
#                route: 'sonata_user_profile_edit_authentication'
#                label: 'link_edit_authentication'
#                domain: 'SonataUserBundle'
#
#        # Profile Form (firstname, lastname, etc ...)
#        form:
#            type:               sonata_user_profile
#            handler:            sonata.user.profile.form.handler.default
#            name:               sonata_user_profile_form
#            validation_groups:  [Profile]


sonata_admin:
    templates:
        search:              SonataAdminBundle:Core:search.html.twig
        search_result_block: SonataAdminBundle:Block:block_search_result.html.twig
    title:      LESCAD
#    title_logo: /bundles/lescadplatforme/images/logo1.png
    security:
        handler: sonata.admin.security.handler.role

#        role_admin: ROLE_ADMIN
#        role_super_admin: ROLE_SUPER_ADMIN
#        # acl security information
#        information:
#            GUEST:    [VIEW, LIST]
#            STAFF:    [EDIT, LIST, CREATE]
#            EDITOR:   [OPERATOR, EXPORT]
#            ADMIN:    [MASTER]
#
#        # permissions not related to an object instance and also to be available when objects do not exist
#        # the DELETE admin permission means the user is allowed to batch delete objects
#        admin_permissions: [CREATE, LIST, DELETE, UNDELETE, EXPORT, OPERATOR, MASTER]
#
#        # permission related to the objects
#        object_permissions: [VIEW, EDIT, DELETE, UNDELETE, OPERATOR, MASTER, OWNER]
   
vich_uploader:
        db_driver: orm
        mappings:
            formation_image:
                uri_prefix:         /lescad/web/images/formations
                upload_destination: '%kernel.root_dir%/../web/images/formations'
                namer:
                    service: vich_uploader.namer_property
                    options: { property: 'slug'}
                
                inject_on_load:     true
                delete_on_update:   true
                delete_on_remove:   true
            formation_banniere:
                uri_prefix:         /lescad/web/images/formations/banniere
                upload_destination: '%kernel.root_dir%/../web/images/formations/banniere'
                namer:
                    service: vich_uploader.namer_property
                    options: { property: 'slug'}
                
                inject_on_load:     true
                delete_on_update:   true
                delete_on_remove:   true
            sss_image:
                uri_prefix:         /lescad/web/images/soutien-scolaire
                upload_destination: '%kernel.root_dir%/../web/images/soutien-scolaire'
                namer:
                    service: vich_uploader.namer_property
                    options: { property: 'slug'}
                
                inject_on_load:     true
                delete_on_update:   true
                delete_on_remove:   true
            sss_banniere:
                uri_prefix:         /lescad/web/images/soutien-scolaire/banniere
                upload_destination: '%kernel.root_dir%/../web/images/soutien-scolaire/banniere'
                namer:
                    service: vich_uploader.namer_property
                    options: { property: 'slug'}
                
                inject_on_load:     true
                delete_on_update:   true
                delete_on_remove:   true
            carousel:
                uri_prefix:         /lescad/web/images/carousel
                upload_destination: '%kernel.root_dir%/../web/images/carousel'
                namer:
                    service: vich_uploader.namer_property
                    options: { property: 'titre'}
                
                inject_on_load:     true
                delete_on_update:   true
                delete_on_remove:   true
                
assetic:
    debug:          '%kernel.debug%'
    use_controller: '%kernel.debug%'
    filters:
        cssrewrite: ~
        jsqueeze:   ~
        scssphp:
            formatter: 'Leafo\ScssPhp\Formatter\Compressed'

liip_imagine:
    resolvers:
        default:
            web_path: ~
    loaders:
        default:
            filesystem:
                data_root: "%kernel.root_dir%/../.."

    filter_sets:
        cache: ~

        # the name of the "filter set"
        ban3:

            # list of transformations to apply (the "filters")
            filters:

                watermark :

                    # path to the watermark file (prepended with "%kernel.root_dir%")
                    image : ../web/images/logos/logo3.png

                    # size of the water mark relative to the input image
                    size : 0.5

                    # set the position of the watermark
                    position : topleft
        ban4:

            # list of transformations to apply (the "filters")
            filters:

                watermark :

                    # path to the watermark file (prepended with "%kernel.root_dir%")
                    image : ../web/images/logos/logo4.png

                    # size of the water mark relative to the input image
                    size : 0.5

                    # set the position of the watermark
                    position : topleft